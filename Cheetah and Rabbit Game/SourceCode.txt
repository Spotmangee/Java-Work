/**
 * Created by Matthew on 26/02/2016.
 */
import java.util.*;

public class game {

    //variables for rabbit
    public static int rx = 2;
    public static int ry = 2;

    //variables for cheetah
    public static int cx = 0;
    public static int cy = 0;

    //variables for grid size:
    public static int gx = 10;
    public static int gy = 10;
    static int moveRX;
    static int moveRY;

    //max is 9 while grid is size 10, 10 - this is because it goes 0123456789 - 10 values etc.
    //max is always gx-1 and gy-1 so it doesn't arrayindexoutofbounds exception
    public static int numMoves = 12;

    public static void main(String[] args) throws Exception {

         //--------------------------------------------------------------------------------
         char grid[][] = new char[gx][gy];

         for (int i = 0; i < grid.length; i++) {
             for (int j = 0; j < grid.length; j++) {
                 grid[i][j] = '-';
             }
         }

         grid[cx][cy] = 'C';
         grid[rx][ry] = 'R';              //rabbits start position: variables declared at beginning of program

         for (int i = 0; i < grid.length; i++) {
             for (int j = 0; j < grid.length; j++) {
                 System.out.print(grid[i][j] + " ");
             }
             System.out.println("");
         }



         //--------------------------------------------------------------------------------
         //end of grid

        //todo-----------------------------------------------------------Rabbit Movement:
        //needs to be += random 1 (either +, - etc.)
        Stack s = new Stack();// sets up a stack to store the direction
        Random r = new Random();//sets up a random variable
        int t=r.nextInt(4);//sets t to be a random number between 0-3


        if(t==0){// if t=0 it makes the Rabbit go up

            rx=rx-1;
            s.push("up");// tells user which direction, pushes it to stack
        }
        if(t==1){//rabbit goes down
            rx=rx+1;
            s.push("down");//stores the direction down into the stack
        }
        if(t==2){//rabbit goes right
            ry=ry+1;
            s.push("Right");//stores the direction gone to stack
        }
        if(t==3){//rabbit goes left
            ry=ry-1;
            s.push("Left");//stores the direction into the stack
        }
        System.out.println("Rabbit :"+ s);//prints the direction the rabbit went after each move
        if(ry>=9)//if the rabbit attempts run off screen it will move in the opposite direction instead
    {
        ry=ry-2;
    }
    if(rx>=9)
    {
        rx=rx-2;
    }
    System.out.println("Rabbit :"+s);//prints rabbit direction after each move

        //--------------------------------------------------------------------------------
        //scanner options for storing walks
        try
        {

        System.out.println("To change program please edit numMoves variable and grid size variable:");
        System.out.println("Please choose an option for storing walks: ");
        System.out.println("1: Use a queue to store walks");
        System.out.println("2: Use a stack to store walks");
        System.out.println("3: Use a array list to store walks");

            Scanner scan = new Scanner(System.in);

            int input = scan.nextInt ();

            //choose storage for walks:
            if (input == 1) {
                queue();
            } else if (input == 2) {
                stack();
            } else if (input == 3) {
                arraylist();
            }

        }
        catch(InputMismatchException exception)
        {
            System.out.println("Error, please enter correct value");
        }
        //number of movements made by rabbit
        for (int i = 0; i < numMoves; i++) {


            grid[moveRX][moveRY] = grid[rx][ry];     //random for rabbit
            grid[rx-1][ry-1] = '-';     //to clear grid - turn rabbits old position into '-'
            grid[moveRX][moveRY]= 'R';
        }

        //to clear movements the rabbit has made:


        //todo----------------------------------------------------------- THE CHEETAH:
        for (int i = 0; i < numMoves; i++) {
            grid[cx][cy] = 'C';      //algorithm selected for cheetah

            if (cx > rx) {
                cx = cx - 1;
            } else if (cx < rx) {
                    cx = cx + 1;
            }
            if (cy > ry) {
                cy = cy - 1;
            } else if (cy < ry) {
                cy = cy + 1;

                for (int j = 0; j < numMoves; j++) {
                }
                if (cx == rx && cy == ry) {
                    grid[rx][ry] = 'C';
                    System.out.println("The cheetah has caught the rabbit!");
                }
            }
        }

        //to clear movements the cheetah has made:
        for (int i = 0; i < grid.length; i++) {
            grid[i][i] = '-';     //to clear grid - turn rabbits old position into '-'
        }

        //todo-----------------------------------------------------------THE GRID - REWRITTEN:

        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid.length; j++) {
                System.out.print(grid[i][j] + " ");
            }
            System.out.println("");
        }
}   //end of main

        //todo-----------------------------------------------------------STACKS, QUEUES AND ARRAYLIST

    //implementation of queue
    public static void queue() {
       //creating queue:
       Queue<Integer> q = new LinkedList<Integer>();

        int walks = numMoves;      //walks needs to be number of movements

        for (int i = 0; i < numMoves; i++) {
            q.add(walks);                               //adds in number of walks madeW
        }

            System.out.println("Walks made by Cheetah: " + q.size());
       }

    //implementation of array list
    public static void arraylist() {        //0
        //creating array list:
        ArrayList<Integer> list = new ArrayList<Integer>();

        int walks = numMoves;      //walks needs to be number of movements

            list.add(walks);
            System.out.println("Walks made by Cheetah: " + list);
    }

    //implementation of stacks
    public static void stack() {        //0
        //creating stack:
        Stack st = new Stack();

        int walks = numMoves;      //walks needs to be number of movements

            st.push(walks);
            System.out.println("Walks made by Cheetah: " + st);
        }

    //todo------------------------------------------------------------ALGORITHMS
    public static void dijk() {     //the Dijkstra algorithm

        Dijkstra d = new Dijkstra();

    }

    public static void A() {        //the A* algorithm

        Astar a = new Astar();

    }
        }  //end of class

